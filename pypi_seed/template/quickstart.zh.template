# 快速入手
（项目生成后的后续操作建议）

请注意一下的示例命令需要打开终端（或者Cmd命令行）运行

## 步骤【01】 推进安装virtualenv 在当前的项目目录

如果你本地没有安装virtualenv， 可以运行下面的命令：

```bash
pip install virtualenv
```

然后使用virtualenv（下面命令）创建一个虚拟环境

```bash
virtualenv .
```

## 步骤【02】 切换激活到虚拟环境

```
source bin/activate
#或者在Windows系统运行 ./Scripts/activate
```

## 步骤【03】 进入模块目录查找main.py路径 => `project-name`/main.py and start development

这里就可以开始在main.py中添加自己的功能。

这个主程序（main.py）就是这个python库的入口了.

- 如果你想要发行自己的cli工具，你可以重新生成项目，通过使用pypi-seed/ppc 并携带 --cli 参数选项

```
ppc -p demo_project -a testuser -d /tmp --cli
#或者运行这个命令: pypiseed -p demo_project -a testuser -d /tmp --cli
```

## 步骤【04】运行测试然后构建项目代码

你可以找到项目目录下有一个'tests'目录，这个目录是pypiseed自动生成的。

你能运行tests目录下面的测试用例。如果你想用pytest，也可以通过pytest来执行。但是需要自行安装。

构建并且安装你的模块:

```
#构建
python setup.py sdist
#本地安装
python setup.py install
```

## 步骤【05】 上传自己的模块到Pypi仓库

实际上，你的项目模块被pypiseed生成后，就是一个可以构建并提交到pypi了。

然而，我们需要开发发布一些实用，有趣，或者是比较好的例子项目。（就像seed项目库一样帮助我生成一些项目，有点用，我也分享出来了。）

```bash
#构建一个通用的whl package , 在当面目录的dist目录会有一个whl文件。
python setup.py bdist_wheel --universal
#使用twine来上传包到pypi, 比如上传下面的包到pypi
twine upload dist/pypi_seed-1.0.6-py2.py3-none-any.whl #请修改为你项目构建出来的whl文件。
```

好了，加油并保持优秀下去 :-P





